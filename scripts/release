#!/bin/bash -e

NPM_CLIENT=$(npm bin)/yarn

########################################
# Make sure working directory is clean #
########################################
if [ ! -z "$(git status --porcelain)" ]; then
  echo Refusing to operate on unclean working directory
  echo Use \"git status\" to see which files have been modified
  exit 1
fi

############################
# Store the current branch #
############################
BRANCH=$(git rev-parse --abbrev-ref HEAD)

################
# Read options #
################
while getopts ":t:c:v:" opt; do
  case $opt in
    t)
      echo "-t (npm tag): $OPTARG" >&2
      npm_tag=$OPTARG
      ;;
    c)
      echo "-c (commit sha): $OPTARG" >&2
      commit_sha=$OPTARG
      ;;
    v)
      echo "-v (version): $OPTARG" >&2
      next_version=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

########################
# Determine the commit #
########################
if ! [[ $commit_sha ]]; then
  printf "Enter commit SHA or git tag (defaults to HEAD): "
  read commit_sha
fi

if ! [[ $commit_sha ]]; then
  commit_sha=HEAD
fi

########################
# Check out the commit #
########################
printf "Checking out $commit_sha ...\n"
git fetch origin --tags --force
git checkout $commit_sha

#########################
# Determine the version #
#########################
current_version=$(node -p "require('./lerna').version")

if ! [[ $next_version ]]; then
  printf "Enter version or <ENTER> to release $current_version: "
  read next_version
fi

if ! [[ $next_version ]]; then
  next_version=$current_version
fi

################################################
# If the version doesn't match package.json... #
################################################
if [[ "$current_version" != "$next_version" ]];
then
  #########################
  # (npm) tag the release #
  #########################
  if ! [[ $npm_tag ]]; then
    printf "Enter an npm tag (beta, rc, latest, stable): "
    read npm_tag

    if ! [[ $npm_tag ]]; then
      npm_tag="dev"
    fi
  fi
else
  npm_tag="stable"
fi

#################################
# Create release branch (local) #
#################################
printf "Creating release branch $release_branch ...\n"
release_branch=$npm_tag/release-$next_version
git checkout -b $release_branch

#######################
# Prepare the release #
#######################
printf "Installing version $next_version ...\n"
$NPM_CLIENT install
printf "Preparing version $next_version ...\n"
$NPM_CLIENT run test

###############################
# Publish sub-packages to npm #
###############################
printf "Running lerna publish --npm-tag $npm_tag\n"
$(npm bin)/lerna publish --skip-git --npm-tag $npm_tag --repo-version $next_version --force-publish=*

######################
# Tag release commit #
######################
git_tag="v$next_version"

printf "Tagging version $git_tag ...\n"

# delete the local tag if it already exists
if [ "`git tag --list $git_tag`" ]; then
  git tag -d $git_tag
fi

git tag -am "Version $next_version" $git_tag
git push origin $git_tag

#####################################
# Build and deploy docs to gh-pages #
#####################################
if [[ "$npm_tag" == "latest" ]]; then
  printf "Building version $next_version of the documentation...\n"
  $NPM_CLIENT run build:docs

  printf "Deploying version $next_version of the documentation...\n"
  $NPM_CLIENT run deploy
fi

#######################################
# Success!!!! Return to origin branch #
#######################################
printf "Version $next_version was successfully released!\n"
git checkout -- .
git checkout $BRANCH
